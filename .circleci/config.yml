
version: 2.1
commands:
  print_command_one:
    description: "printing a text"
    parameters:
      to:
        type: string
        default: "Learning commands"
    steps:
      - run: echo << parameters.to >>
  print_envs:
    description: "to Print command environment variables"
    steps:
      - run: echo "Job is ${CIRCLE_JOB} and workflow is ${CIRCLE_WORKFLOW_ID:0:2}. The pipeline id is << pipeline.id >>"
executors:
  general-executor:
    docker:
      - image: circleci/ruby:2.4.1
  lw_executor:
    docker:
      - image: circleci/node:13.8.0
orbs:
  node: circleci/node@1.1
jobs:
  
  second_job:
    executor: general-executor # this uses a predefined docker image for execution
    steps:
      - checkout
      - run: echo "This is second Job without sleep"
  first_job:
    executor: general-executor # predefined
    steps:
      - checkout
      - run: echo "Echo with sleep"
      - run: sleep 10
      - run: echo "My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>"
  print_envs:
    environment:
      MY_NAME: "Pius pipeline"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: echo "${MY_NAME} other env ${CIRCLE_WORKFLOW_ID:0:2} "
      - run: echo "Circle job is ${CIRCLE_JOB} and pull request username is ${CIRCLE_PR_USERNAME}"
      - print_envs
  create_file_to_share:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     #- run: mkdir ~/tmp/workspace
     - run: mkdir ~/tmp
     - run: mkdir ~/tmp/workspace
     - run: echo "value to store in file" > ~/tmp/workspace/output.txt #tmp/workspace/output.txt

     - persist_to_workspace: # this saves a file to workspace for sharing
        root: ~/tmp/workspace #required for persist workspace. It can be an absolute path or one relative to pwd
        paths: #paths relative to the workspace  root. Must not be root itself
          #- file/share/output.txt #directory /tmp/workspace/file/share now exiists
          #- share      # directory /tmp/workspace/share now exists.
          - output.txt
  print_out_workspace:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: echo "This is attach to workspace"
      - attach_workspace:
          at: ~/tmp/workspace     #/tmp/workspace
      - run: cat ~/tmp/workspace/output.txt  #tmp/workspace/output.txt
  using_commands:
    executor: general-executor
    steps:
      - print_command_one:
          to: "Your first print job using a defined command!"
  testing_failure:
    executor: lw_executor
    steps:
      - run: return 1 #this step simply fails
      - run:
          name: on error 
          command: echo "Failed" 
          when: on_fail
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file template3.yml \
              --stack-name MyStack
  
  configure_infastructure: #job to configure infrastructure
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "34:fb:e6:69:96:ef:69:7c:6d:de:98:a9:e0:c4:01:1c"
      - run: 
         name: install dependencies
         command: |
           apk add --update ansible #install the dependencies 
      - run:
         name: Configure server
         command: |
          ansible-playbook -i inventory2.txt main-remote.yml #mainremote represents the plabook with instructions to execute
  

workflows: # workflow is used to coordinate job execution. Some jobs may only get executed after others
  version: 2.1
  workflow_name: #use any convenient name for the workflow
    jobs: #list the jobs this workflow should run
      - second_job
      - first_job:
          requires:
            - second_job
      - print_envs
      - print_out_workspace:
          requires:
            - create_file_to_share
      - create_file_to_share
      - using_commands
      - testing_failure #this job is meant to fail. No alarm.
      - create_infrastructure #this should work not working yet
      - configure_infastructure:
          requires:
           - create_infrastructure
